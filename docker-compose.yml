# docker-compose.yml
# Configuración completa para el sistema ControlAcceso
# Incluye frontend (React + Nginx), backend (Node.js) y base de datos (PostgreSQL)

version: '3.8'

services:
  # Base de datos PostgreSQL
  database:
    build:
      context: ./database
      dockerfile: Dockerfile
    image: controlacceso-database:latest
    container_name: controlacceso-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-controlacceso}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres123}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - controlacceso-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-controlacceso}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp
      - /var/run/postgresql

  # Backend API Node.js
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: controlacceso-backend
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3001
      DB_HOST: database
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-controlacceso}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres123}
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-this-in-production}
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3000}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
    ports:
      - "${BACKEND_PORT:-3001}:3001"
    networks:
      - controlacceso-network
    depends_on:
      database:
        condition: service_healthy
    volumes:
      - backend_logs:/app/logs
      - backend_uploads:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp

  # Frontend React con Nginx
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: controlacceso-frontend
    restart: unless-stopped
    environment:
      REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:3001}
      REACT_APP_BACKEND_URL: ${REACT_APP_BACKEND_URL:-http://localhost:3001}
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    networks:
      - controlacceso-network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s
    security_opt:
      - no-new-privileges:true

# Volúmenes nombrados para persistencia de datos
volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/postgres
  backend_logs:
    driver: local
  backend_uploads:
    driver: local

# Red personalizada para comunicación entre servicios
networks:
  controlacceso-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
