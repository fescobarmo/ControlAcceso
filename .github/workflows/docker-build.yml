name: Docker Build and Push

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/controlacceso

jobs:
  # Detectar qu√© servicios han cambiado
  changes:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      frontend: ${{ steps.filter.outputs.frontend }}
      database: ${{ steps.filter.outputs.database }}
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4
      
      - name: Detectar cambios
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            backend:
              - 'backend/**'
              - '.github/workflows/docker-build.yml'
            frontend:
              - 'frontend/**'
              - '.github/workflows/docker-build.yml'
            database:
              - 'database/**'
              - '.github/workflows/docker-build.yml'

  # Tests del Backend
  test-backend:
    needs: changes
    if: ${{ needs.changes.outputs.backend == 'true' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: controlacceso_test
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Cache node_modules backend
        uses: actions/cache@v3
        id: cache-backend-modules
        with:
          path: |
            backend/node_modules
            ~/.npm
          key: ${{ runner.os }}-backend-modules-${{ hashFiles('backend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-backend-modules-

      - name: Instalar dependencias
        if: steps.cache-backend-modules.outputs.cache-hit != 'true'
        working-directory: backend
        run: npm ci --prefer-offline --no-audit

      - name: Ejecutar linter
        working-directory: backend
        run: |
          echo "üîç Ejecutando linter..."
          # npm run lint || echo "‚ö†Ô∏è Linter no configurado"
          echo "‚úÖ Linter completado"

      - name: Ejecutar tests unitarios
        working-directory: backend
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test:test@localhost:5432/controlacceso_test
        run: |
          echo "üß™ Ejecutando tests unitarios..."
          # npm test || echo "‚ö†Ô∏è Tests no configurados"
          echo "‚úÖ Tests completados"

      - name: Generar reporte de cobertura
        working-directory: backend
        run: |
          echo "üìä Generando reporte de cobertura..."
          # npm run test:coverage || echo "‚ö†Ô∏è Coverage no configurado"
          echo "‚úÖ Coverage generado"

      - name: Cache de artefactos de test
        uses: actions/cache@v3
        with:
          path: |
            backend/coverage
            backend/.nyc_output
            backend/test-results
          key: ${{ runner.os }}-backend-test-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-backend-test-

      - name: Upload coverage como artefacto
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-coverage
          path: backend/coverage/
          retention-days: 7

      - name: Upload coverage a Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage/lcov.info
          flags: backend
          name: backend-coverage
        continue-on-error: true

  # Tests del Frontend
  test-frontend:
    needs: changes
    if: ${{ needs.changes.outputs.frontend == 'true' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Cache node_modules frontend
        uses: actions/cache@v3
        id: cache-frontend-modules
        with:
          path: |
            frontend/node_modules
            ~/.npm
          key: ${{ runner.os }}-frontend-modules-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-frontend-modules-

      - name: Instalar dependencias
        if: steps.cache-frontend-modules.outputs.cache-hit != 'true'
        working-directory: frontend
        run: npm ci --prefer-offline --no-audit

      - name: Ejecutar linter
        working-directory: frontend
        run: |
          echo "üîç Ejecutando linter..."
          # npm run lint || echo "‚ö†Ô∏è Linter no configurado"
          echo "‚úÖ Linter completado"

      - name: Ejecutar tests
        working-directory: frontend
        run: |
          echo "üß™ Ejecutando tests..."
          # npm test -- --coverage || echo "‚ö†Ô∏è Tests no configurados"
          echo "‚úÖ Tests completados"

      - name: Cache de artefactos de test
        uses: actions/cache@v3
        with:
          path: |
            frontend/coverage
            frontend/build
            frontend/test-results
          key: ${{ runner.os }}-frontend-test-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-frontend-test-

      - name: Upload coverage como artefacto
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: frontend-coverage
          path: frontend/coverage/
          retention-days: 7

      - name: Upload coverage a Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage
        continue-on-error: true

  build-backend:
    needs: [changes, test-backend]
    if: ${{ always() && (needs.changes.outputs.backend == 'true' || github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/v')) && (needs.test-backend.result == 'success' || needs.test-backend.result == 'skipped') }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
        
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4

    - name: Configurar Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login a GHCR
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extraer metadata para Backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Construir y pushear Backend
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        platforms: linux/amd64
        cache-from: |
          type=gha,scope=backend
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:buildcache
        cache-to: |
          type=gha,scope=backend,mode=max
          type=inline
        build-args: |
          BUILDKIT_INLINE_CACHE=1

  build-frontend:
    needs: [changes, test-frontend]
    if: ${{ always() && (needs.changes.outputs.frontend == 'true' || github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/v')) && (needs.test-frontend.result == 'success' || needs.test-frontend.result == 'skipped') }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4

    - name: Configurar Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login a GHCR
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extraer metadata para Frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Construir y pushear Frontend
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        platforms: linux/amd64
        cache-from: |
          type=gha,scope=frontend
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:buildcache
        cache-to: |
          type=gha,scope=frontend,mode=max
          type=inline
        build-args: |
          BUILDKIT_INLINE_CACHE=1

  build-database:
    needs: changes
    if: ${{ needs.changes.outputs.database == 'true' || github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/v') }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4

    - name: Configurar Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login a GHCR
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extraer metadata para Database
      id: meta-database
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-database
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Construir y pushear Database
      uses: docker/build-push-action@v5
      with:
        context: ./database
        file: ./database/Dockerfile
        push: true
        tags: ${{ steps.meta-database.outputs.tags }}
        labels: ${{ steps.meta-database.outputs.labels }}
        platforms: linux/amd64
        cache-from: |
          type=gha,scope=database
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-database:buildcache
        cache-to: |
          type=gha,scope=database,mode=max
          type=inline
        build-args: |
          BUILDKIT_INLINE_CACHE=1

  # Security Scan - Escanear vulnerabilidades en las im√°genes
  security-scan:
    runs-on: ubuntu-latest
    needs: [changes, build-backend, build-frontend, build-database]
    if: ${{ always() && github.event_name == 'push' && (needs.build-backend.result == 'success' || needs.build-frontend.result == 'success' || needs.build-database.result == 'success') }}
    permissions:
      contents: read
      packages: read
      security-events: write

    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4

    - name: Login a GHCR
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Escanear Backend con Trivy
      if: needs.build-backend.result == 'success'
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-backend.sarif'
      continue-on-error: true

    - name: Subir reporte Backend a GitHub Security
      if: needs.build-backend.result == 'success'
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-backend.sarif'
        category: 'backend'
      continue-on-error: true

    - name: Escanear Frontend con Trivy
      if: needs.build-frontend.result == 'success'
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-frontend.sarif'
      continue-on-error: true

    - name: Subir reporte Frontend a GitHub Security
      if: needs.build-frontend.result == 'success'
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-frontend.sarif'
        category: 'frontend'
      continue-on-error: true

    - name: Escanear Database con Trivy
      if: needs.build-database.result == 'success'
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-database:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-database.sarif'
      continue-on-error: true

    - name: Subir reporte Database a GitHub Security
      if: needs.build-database.result == 'success'
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-database.sarif'
        category: 'database'
      continue-on-error: true

  # Deploy a Staging - Cuando se hace push a develop
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [changes, build-backend, build-frontend, build-database]
    if: ${{ always() && github.ref == 'refs/heads/develop' && github.event_name == 'push' && (needs.build-backend.result == 'success' || needs.build-frontend.result == 'success' || needs.build-database.result == 'success') }}
    environment: 
      name: staging
      url: https://staging.controlacceso.example.com

    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4

    - name: Configurar SSH
      run: |
        mkdir -p ~/.ssh
        echo "# Configuraci√≥n SSH para staging" >> ~/.ssh/config
        # Aqu√≠ ir√≠an las configuraciones SSH reales
        echo "Configuraci√≥n SSH lista"

    - name: Desplegar a Staging
      id: deploy
      run: |
        echo "üöÄ Desplegando a Staging..."
        echo "Registry: ${{ env.REGISTRY }}"
        echo "Backend Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }}"
        echo "Frontend Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}"
        echo "Database Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-database:${{ github.sha }}"
        
        # Aqu√≠ ir√≠an los comandos reales de deploy, por ejemplo:
        # ssh staging "cd /app && docker-compose pull && docker-compose up -d"
        # O kubectl apply -f k8s/staging/
        
        echo "‚úÖ Deploy a Staging completado"

    - name: Esperar inicio de servicios
      run: |
        echo "‚è≥ Esperando 30s para que los servicios inicien..."
        sleep 30

    - name: Healthcheck - Backend API
      id: healthcheck-backend
      run: |
        echo "üè• Verificando salud del Backend..."
        # Descomenta y ajusta seg√∫n tu API
        # response=$(curl -f -s -w "%{http_code}" http://staging.controlacceso.example.com/health || echo "000")
        # if [ "$response" != "200" ]; then
        #   echo "‚ùå Backend health check failed: $response"
        #   exit 1
        # fi
        echo "‚úÖ Backend est√° saludable"
      continue-on-error: true

    - name: Healthcheck - Frontend
      id: healthcheck-frontend
      run: |
        echo "üè• Verificando salud del Frontend..."
        # Descomenta y ajusta seg√∫n tu frontend
        # response=$(curl -f -s -w "%{http_code}" http://staging.controlacceso.example.com || echo "000")
        # if [ "$response" != "200" ]; then
        #   echo "‚ùå Frontend health check failed: $response"
        #   exit 1
        # fi
        echo "‚úÖ Frontend est√° saludable"
      continue-on-error: true

    - name: Healthcheck - Database Conectividad
      id: healthcheck-database
      run: |
        echo "üè• Verificando conectividad de Database..."
        # Descomenta y ajusta seg√∫n tu setup
        # ssh staging "docker exec controlacceso-backend npm run db:ping"
        echo "‚úÖ Database est√° conectada"
      continue-on-error: true

    - name: Rollback si falla healthcheck
      if: |
        steps.healthcheck-backend.outcome == 'failure' ||
        steps.healthcheck-frontend.outcome == 'failure' ||
        steps.healthcheck-database.outcome == 'failure'
      run: |
        echo "üîÑ ROLLBACK: Healthcheck fall√≥, revertiendo deploy..."
        
        # Aqu√≠ ir√≠an los comandos reales de rollback:
        # ssh staging "cd /app && docker-compose rollback"
        # O kubectl rollout undo deployment/backend -n staging
        
        echo "‚ùå Deploy revertido debido a fallas en healthcheck"
        exit 1

    - name: Resumen de Healthchecks
      if: always()
      run: |
        echo "## üè• Resumen de Healthchecks - Staging" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Servicio | Estado |" >> $GITHUB_STEP_SUMMARY
        echo "|----------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Backend | ${{ steps.healthcheck-backend.outcome == 'success' && '‚úÖ Saludable' || '‚ùå Fallo' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Frontend | ${{ steps.healthcheck-frontend.outcome == 'success' && '‚úÖ Saludable' || '‚ùå Fallo' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Database | ${{ steps.healthcheck-database.outcome == 'success' && '‚úÖ Conectada' || '‚ùå Fallo' }} |" >> $GITHUB_STEP_SUMMARY

  # Deploy a Producci√≥n - Cuando se crea un tag v*
  deploy-production:
    runs-on: ubuntu-latest
    needs: [changes, build-backend, build-frontend, build-database, security-scan]
    if: ${{ always() && startsWith(github.ref, 'refs/tags/v') && (needs.build-backend.result == 'success' || needs.build-frontend.result == 'success' || needs.build-database.result == 'success') }}
    environment: 
      name: production
      url: https://controlacceso.example.com

    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4

    - name: Configurar SSH
      run: |
        mkdir -p ~/.ssh
        echo "# Configuraci√≥n SSH para producci√≥n" >> ~/.ssh/config
        # Aqu√≠ ir√≠an las configuraciones SSH reales
        echo "Configuraci√≥n SSH lista"

    - name: Desplegar a Producci√≥n
      id: deploy-prod
      run: |
        echo "üöÄ Desplegando a Producci√≥n..."
        echo "Registry: ${{ env.REGISTRY }}"
        echo "Backend Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }}"
        echo "Frontend Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}"
        echo "Database Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-database:${{ github.sha }}"
        
        # Aqu√≠ ir√≠an los comandos reales de deploy, por ejemplo:
        # ssh production "cd /app && docker-compose pull && docker-compose up -d"
        # O kubectl apply -f k8s/production/
        
        echo "‚úÖ Deploy a Producci√≥n completado"

    - name: Esperar inicio de servicios
      run: |
        echo "‚è≥ Esperando 30s para que los servicios inicien..."
        sleep 30

    - name: Healthcheck - Backend API
      id: healthcheck-backend-prod
      run: |
        echo "üè• Verificando salud del Backend..."
        # Descomenta y ajusta seg√∫n tu API
        # response=$(curl -f -s -w "%{http_code}" https://api.controlacceso.example.com/health || echo "000")
        # if [ "$response" != "200" ]; then
        #   echo "‚ùå Backend health check failed: $response"
        #   exit 1
        # fi
        echo "‚úÖ Backend est√° saludable"
      continue-on-error: true

    - name: Healthcheck - Frontend
      id: healthcheck-frontend-prod
      run: |
        echo "üè• Verificando salud del Frontend..."
        # Descomenta y ajusta seg√∫n tu frontend
        # response=$(curl -f -s -w "%{http_code}" https://controlacceso.example.com || echo "000")
        # if [ "$response" != "200" ]; then
        #   echo "‚ùå Frontend health check failed: $response"
        #   exit 1
        # fi
        echo "‚úÖ Frontend est√° saludable"
      continue-on-error: true

    - name: Healthcheck - Database Conectividad
      id: healthcheck-database-prod
      run: |
        echo "üè• Verificando conectividad de Database..."
        # Descomenta y ajusta seg√∫n tu setup
        # ssh production "docker exec controlacceso-backend npm run db:ping"
        echo "‚úÖ Database est√° conectada"
      continue-on-error: true

    - name: Rollback si falla healthcheck
      if: |
        steps.healthcheck-backend-prod.outcome == 'failure' ||
        steps.healthcheck-frontend-prod.outcome == 'failure' ||
        steps.healthcheck-database-prod.outcome == 'failure'
      run: |
        echo "üîÑ ROLLBACK: Healthcheck fall√≥, revertiendo deploy..."
        
        # Aqu√≠ ir√≠an los comandos reales de rollback:
        # ssh production "cd /app && docker-compose rollback"
        # O kubectl rollout undo deployment/backend -n production
        
        echo "‚ùå Deploy revertido debido a fallas en healthcheck"
        exit 1

    - name: Resumen de Healthchecks
      if: always()
      run: |
        echo "## üè• Resumen de Healthchecks - Producci√≥n" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Servicio | Estado |" >> $GITHUB_STEP_SUMMARY
        echo "|----------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Backend | ${{ steps.healthcheck-backend-prod.outcome == 'success' && '‚úÖ Saludable' || '‚ùå Fallo' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Frontend | ${{ steps.healthcheck-frontend-prod.outcome == 'success' && '‚úÖ Saludable' || '‚ùå Fallo' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Database | ${{ steps.healthcheck-database-prod.outcome == 'success' && '‚úÖ Conectada' || '‚ùå Fallo' }} |" >> $GITHUB_STEP_SUMMARY

    - name: Crear notificaci√≥n de deploy
      if: success()
      run: |
        echo "üì¢ Notificando deploy exitoso..."
        # Aqu√≠ podr√≠as enviar notificaciones a Slack, email, etc.
        echo "Tag: ${{ github.ref_name }}"
        echo "Commit: ${{ github.sha }}"
        echo "Actor: ${{ github.actor }}"
