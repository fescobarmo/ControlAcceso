name: Docker Build and Push

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/controlacceso

jobs:
  build-backend:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4

    - name: Configurar Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login a GHCR
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Construir y pushear Backend
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }}
        platforms: linux/amd64
        cache-from: type=gha
        cache-to: type=gha,mode=max

  build-frontend:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4

    - name: Configurar Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login a GHCR
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Construir y pushear Frontend
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}
        platforms: linux/amd64
        cache-from: type=gha
        cache-to: type=gha,mode=max

  build-database:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4

    - name: Configurar Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login a GHCR
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Construir y pushear Database
      uses: docker/build-push-action@v5
      with:
        context: ./database
        file: ./database/Dockerfile
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-database:latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-database:${{ github.sha }}
        platforms: linux/amd64
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Security Scan - Escanear vulnerabilidades en las im√°genes
  security-scan:
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend, build-database]
    if: github.event_name == 'push'
    permissions:
      contents: read
      packages: read
      security-events: write
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4

    - name: Login a GHCR
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Escanear Backend con Trivy
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-backend.sarif'
      continue-on-error: true

    - name: Subir reporte Backend a GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-backend.sarif'
        category: 'backend'
      continue-on-error: true

    - name: Escanear Frontend con Trivy
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-frontend.sarif'
      continue-on-error: true

    - name: Subir reporte Frontend a GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-frontend.sarif'
        category: 'frontend'
      continue-on-error: true

    - name: Escanear Database con Trivy
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-database:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-database.sarif'
      continue-on-error: true

    - name: Subir reporte Database a GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-database.sarif'
        category: 'database'
      continue-on-error: true

  # Deploy a Staging - Cuando se hace push a develop
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend, build-database]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: 
      name: staging
      url: https://staging.controlacceso.example.com
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4

    - name: Configurar SSH
      run: |
        mkdir -p ~/.ssh
        echo "# Configuraci√≥n SSH para staging" >> ~/.ssh/config
        # Aqu√≠ ir√≠an las configuraciones SSH reales
        echo "Configuraci√≥n SSH lista"

    - name: Desplegar a Staging
      run: |
        echo "üöÄ Desplegando a Staging..."
        echo "Registry: ${{ env.REGISTRY }}"
        echo "Backend Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }}"
        echo "Frontend Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}"
        echo "Database Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-database:${{ github.sha }}"
        
        # Aqu√≠ ir√≠an los comandos reales de deploy, por ejemplo:
        # ssh staging "cd /app && docker-compose pull && docker-compose up -d"
        # O kubectl apply -f k8s/staging/
        
        echo "‚úÖ Deploy a Staging completado"

  # Deploy a Producci√≥n - Cuando se crea un tag v*
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend, build-database, security-scan]
    if: startsWith(github.ref, 'refs/tags/v')
    environment: 
      name: production
      url: https://controlacceso.example.com
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4

    - name: Configurar SSH
      run: |
        mkdir -p ~/.ssh
        echo "# Configuraci√≥n SSH para producci√≥n" >> ~/.ssh/config
        # Aqu√≠ ir√≠an las configuraciones SSH reales
        echo "Configuraci√≥n SSH lista"

    - name: Desplegar a Producci√≥n
      run: |
        echo "üöÄ Desplegando a Producci√≥n..."
        echo "Registry: ${{ env.REGISTRY }}"
        echo "Backend Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }}"
        echo "Frontend Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}"
        echo "Database Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-database:${{ github.sha }}"
        
        # Aqu√≠ ir√≠an los comandos reales de deploy, por ejemplo:
        # ssh production "cd /app && docker-compose pull && docker-compose up -d"
        # O kubectl apply -f k8s/production/
        
        echo "‚úÖ Deploy a Producci√≥n completado"

    - name: Crear notificaci√≥n de deploy
      run: |
        echo "üì¢ Notificando deploy exitoso..."
        # Aqu√≠ podr√≠as enviar notificaciones a Slack, email, etc.
        echo "Tag: ${{ github.ref_name }}"
        echo "Commit: ${{ github.sha }}"
        echo "Actor: ${{ github.actor }}"
